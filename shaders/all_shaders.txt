 // program vertex

 #version 330 core

layout (location = 0) in vec3 a_position;
layout (location = 1) in vec3 a_normal;
layout (location = 2) in vec4 a_color;

out vec3 v_color;

uniform mat4 u_modelview;
uniform mat4 u_perspective;

void main() {
    gl_Position = u_perspective * u_modelview * vec4(a_position, 1.0);
    v_color = a_color.rgb;
}

// program fragment

#version 330 core

out vec4 f_color;

in vec3 v_color;

void main() {
    f_color = vec4(v_color, 1.0f);
}

// depth_peel vertex

#version 330 core

layout (location = 0) in vec3 a_position;
layout (location = 1) in vec3 a_normal;
layout (location = 2) in vec4 a_color;

out vec3 v_color;

uniform mat4 u_modelview;
uniform mat4 u_perspective;

void main() {
    gl_Position = u_perspective * u_modelview * vec4(a_position, 1.0);
    v_color = a_color.rgb;
}

// depth_peel fragment

#version 330 core

out vec4 f_color;

in vec3 v_color;

uniform sampler2D u_depth;

void main() {
    float depth = 0.5 * texture(u_depth, gl_FragCoord.xy).r;

    f_color = vec4(depth, depth, depth, 1.0);
}

// from_framebuffer just renders a quad to the screen using the last frame as a texture;